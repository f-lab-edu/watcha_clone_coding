# .github/workflows/deploy-optimized.yml
name: Deploy to S3 (Optimized)

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  BUILD_DIR: ./apps/watcha_clone_coding/dist

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.7
        
      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.1.0
        with:
          node-version: '22.13.0'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@fe1a63c94f9b5b83dc0a45228ac5a9ab52f6e83f # v4.0.0
        with:
          version: '10.15.1'
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build workspace packages
        run: |
          echo "=== 워크스페이스 패키지들 빌드 ==="
          pnpm --filter @watcha/carousel build
          
      - name: Run type check
        run: pnpm type-check
        
      - name: Build for production
        run: pnpm build:production
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to S3 with optimized settings
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          # HTML 파일 업로드 - 캐시 비활성화
          aws s3 sync ${{ env.BUILD_DIR }} s3://$S3_BUCKET_NAME \
            --exclude "*" \
            --include "*.html" \
            --cache-control "max-age=0,must-revalidate,public" \
            --content-type "text/html; charset=utf-8" \
            --delete
          
          # CSS 파일 업로드 - 1년 캐시
          aws s3 sync ${{ env.BUILD_DIR }} s3://$S3_BUCKET_NAME \
            --exclude "*" \
            --include "*.css" \
            --cache-control "max-age=31536000,public" \
            --content-type "text/css; charset=utf-8"
          
          # JS 파일 업로드 - 1년 캐시  
          aws s3 sync ${{ env.BUILD_DIR }} s3://$S3_BUCKET_NAME \
            --exclude "*" \
            --include "*.js" \
            --cache-control "max-age=31536000,public" \
            --content-type "application/javascript; charset=utf-8"
          
          # 기타 파일들 (이미지, 폰트 등) 업로드 - 1년 캐시
          aws s3 sync ${{ env.BUILD_DIR }} s3://$S3_BUCKET_NAME \
            --exclude "*.html" \
            --exclude "*.css" \
            --exclude "*.js" \
            --cache-control "max-age=31536000,public"
          
      - name: Invalidate CloudFront
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*.html" "/*.css" "/*.js"